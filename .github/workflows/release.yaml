name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  release_job:
    name: Release
    runs-on: ubuntu-latest
    env:
      APPLICATION_REPO: "api-application-state"
      TEST_VERSION_FILENAME: "test-version.yaml"
      DEV_VERSION_FILENAME: "dev-version.yaml"
      QA_VERSION_FILENAME: "qa-version.yaml"
      PROD_VERSION_FILENAME: "prod-version.yaml"
      BRANCH: "test"
      GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.ENGINEERING_GITHUB_PERSONAL_ACCESS_TOKEN }}
      GIT_CONFIG_USER_EMAIL: ${{ secrets.ENGINEERING_GIT_CONFIG_USER_EMAIL }}
      GIT_CONFIG_USER_NAME: ${{ secrets.ENGINEERING_GIT_CONFIG_USER_NAME }}
      GPG_PRIVATE_KEY: ${{ secrets.ENGINEERING_GPG_PRIVATE_KEY }}

    steps:
      - name: Set up Golang
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Configure ssh-key for private modules
        env:
          SSH_KEY: ${{ secrets.ENGINEERING_SSH_KEY }}
        run: mkdir -p ~/.ssh; echo "$SSH_KEY" > ~/.ssh/id_rsa; chmod 600 ~/.ssh/id_rsa; git config --global url."git@github.com:".insteadOf "https://github.com/"

      - name: Setup go modules
        run: go clean -modcache; go mod tidy; go mod download; go mod verify; go mod vendor;

      - name: Set env
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
          echo "VALUES_PATH=apps/honestcard/${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF:10}" >> $GITHUB_ENV

      - name: Login to gcloud registry (test)
        id: gcloud-test
        uses: elgohr/gcloud-login-action@master
        with:
          account_key: ${{ secrets.GCP_TEST_CONTAINER_REGISTRY_PROJECT_CREDENTIALS }}

      - name: Build Docker and Publish to Registry (test)
        uses: elgohr/Publish-Docker-Github-Action@master
        env:
          SSH_PRIVATE_KEY: ${{ secrets.ENGINEERING_SSH_KEY }}
        with:
          name: ${{ secrets.GCP_TEST_CONTAINER_REGISTRY_PROJECT_NAME }}/${{ env.REPO_NAME }}
          username: ${{ steps.gcloud-test.outputs.username }}
          password: ${{ steps.gcloud-test.outputs.password }}
          registry: asia.gcr.io
          tags: latest,${{ env.VERSION }}
          buildargs: SSH_PRIVATE_KEY

      - name: Login to gcloud registry (prod)
        id: gcloud-prod
        uses: elgohr/gcloud-login-action@master
        with:
          account_key: ${{ secrets.GCP_PROD_CONTAINER_REGISTRY_PROJECT_CREDENTIALS }}

      - name: Build Docker and Publish to Registry (prod)
        uses: elgohr/Publish-Docker-Github-Action@master
        env:
          SSH_PRIVATE_KEY: ${{ secrets.ENGINEERING_SSH_KEY }}
        with:
          name: ${{ secrets.GCP_PROD_CONTAINER_REGISTRY_PROJECT_NAME }}/${{ env.REPO_NAME }}
          username: ${{ steps.gcloud-prod.outputs.username }}
          password: ${{ steps.gcloud-prod.outputs.password }}
          registry: asia.gcr.io
          tags: latest,${{ env.VERSION }}
          buildargs: SSH_PRIVATE_KEY

      - name: Clone api-application-state repo
        run: git clone "https://${{ env.GITHUB_PERSONAL_ACCESS_TOKEN }}@github.com/honestbank/${{ env.APPLICATION_REPO }}.git" ${{ env.APPLICATION_REPO }}

      - name: Create api-application-state branch
        run: cd ${{ env.APPLICATION_REPO }} && git checkout "$BRANCH" && cd ${{ env.VALUES_PATH}}

      - name: Customize deploy script
        shell: bash
        run: |
          cd ${{ env.APPLICATION_REPO }}/${{ env.VALUES_PATH}}
          echo "---
          image:
             tag: ${{ env.VERSION }}
          version: ${{ env.VERSION }}" > $TEST_VERSION_FILENAME

      - name: yaml-lint
        uses: ibiqlik/action-yamllint@v1
        with:
          file_or_dir: ${{ env.APPLICATION_REPO }}/${{ env.VALUES_PATH}}/${{ env.TEST_VERSION_FILENAME }}

      - name: Copy test-version.yaml to other environments
        shell: bash
        run: |
          cd $APPLICATION_REPO/$VALUES_PATH
          cp $TEST_VERSION_FILENAME $DEV_VERSION_FILENAME
          cp $TEST_VERSION_FILENAME $QA_VERSION_FILENAME
          cp $TEST_VERSION_FILENAME $PROD_VERSION_FILENAME

      - name: Setup GPG
        shell: bash
        run: |
          echo "${{ env.GPG_PRIVATE_KEY }}" >> private.key
          gpg --import private.key
          KEY=$(gpg  --list-secret-keys ${{ env.GIT_CONFIG_USER_EMAIL }} | head -2 | tail -n 1 | awk '{print$1}')
          git config --global user.signingkey $KEY

      - name: Push new api-application-state
        run: >
          cd $APPLICATION_REPO && git config user.email "${{ env.GIT_CONFIG_USER_EMAIL }}"&& git add * && git config user.name "${{ env.GIT_CONFIG_USER_NAME }}" && git commit -S -a -m "chore($REPO_NAME): bump to version $VERSION" && git push --set-upstream origin "$BRANCH"
